package com.example.walking_hadang.ui

import android.Manifest
import android.content.Context
import android.content.Intent
import android.content.pm.PackageManager
import android.location.Location
import android.net.Uri
import android.os.Bundle
import android.os.Looper
import android.util.Log
import android.view.LayoutInflater
import android.view.View
import android.view.ViewGroup
import android.widget.Button
import android.widget.ImageView
import android.widget.TextView
import android.widget.Toast
import androidx.annotation.RequiresPermission
import androidx.core.app.ActivityCompat
import androidx.core.content.ContextCompat
import androidx.fragment.app.Fragment
import androidx.recyclerview.widget.RecyclerView
import com.example.walking_hadang.R
import com.example.walking_hadang.data.AssetCourseData
import com.example.walking_hadang.data.CourseWrapper
import com.example.walking_hadang.data.WalkData
import com.example.walking_hadang.databinding.FragmentMapBinding
import com.example.walking_hadang.util.LocationUtil
import com.example.walking_hadang.util.WalkRepository
import com.google.android.gms.location.FusedLocationProviderClient
import com.google.android.gms.location.LocationCallback
import com.google.android.gms.location.LocationResult
import com.google.android.gms.location.LocationRequest
import com.google.android.gms.location.LocationServices
import com.google.android.gms.location.Priority
import com.google.android.gms.maps.CameraUpdateFactory
import com.google.android.gms.maps.GoogleMap
import com.google.android.gms.maps.OnMapReadyCallback
import com.google.android.gms.maps.SupportMapFragment
import com.google.android.gms.maps.model.LatLng
import com.google.android.gms.maps.model.LatLngBounds
import com.google.android.gms.maps.model.Marker
import com.google.android.gms.maps.model.MarkerOptions
import com.google.android.gms.maps.model.Polyline
import com.google.android.gms.maps.model.PolylineOptions
import com.google.firebase.Timestamp
import com.google.gson.Gson
import com.google.maps.android.PolyUtil
import java.util.Date
import java.util.Locale
import kotlin.math.roundToInt

class MapFragment : Fragment(), OnMapReadyCallback {

    companion object {
        private const val LOCATION_PERMISSION_REQUEST_CODE = 1001
    }

    private var _binding: FragmentMapBinding? = null
    private val binding get() = _binding!!

    private var selectMarker: Marker? = null

    private lateinit var fusedLocationClient: FusedLocationProviderClient
    private lateinit var googleMap: GoogleMap
    private lateinit var startButton: Button
    private lateinit var mapFragment: SupportMapFragment
    private lateinit var recyclerView: RecyclerView

    private var runningPolyline: Polyline? = null
    private var runningPath =  mutableListOf<LatLng>()
    private var isRunning: Boolean = false
    private var walkStartMillis: Long? = null

    private var locationRequest: com.google.android.gms.location.LocationRequest? = null
    private lateinit var locationcallback: LocationCallback

    //ÏßÄÎèÑ ÎßàÏª§ÏôÄ Ïπ¥ÎìúÎ∑∞ Ïó∞Í≤∞
    private val markerCourseMap = mutableMapOf<Marker, AssetCourseData>()

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        locationcallback = object : com.google.android.gms.location.LocationCallback() {
            override fun onLocationResult(result: com.google.android.gms.location.LocationResult) {
                val map = googleMap ?: return
                for(loc in result!!.locations){
                    val p = LatLng(loc.latitude, loc.longitude)
                    runningPath.add(p)

                    runningPolyline?.points = runningPath

                    map.animateCamera(CameraUpdateFactory.newLatLngZoom(p, 16f))
                }
            }
        }
    }

    override fun onCreateView(
        inflater: LayoutInflater, container: ViewGroup?,
        savedInstanceState: Bundle?
    ): View {
        _binding = FragmentMapBinding.inflate(inflater, container, false)
        return binding.root
    }

    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {
        super.onViewCreated(view, savedInstanceState)

        requireActivity().findViewById<TextView>(R.id.toolbarTitle).text = "ÏßÄÎèÑ"

        fusedLocationClient = LocationServices.getFusedLocationProviderClient(requireActivity())
        val mapFragment = childFragmentManager.findFragmentById(R.id.map) as SupportMapFragment
        mapFragment.getMapAsync(this)

        startButton = binding.btnStartWalking

        startButton.setOnClickListener {
            if(isRunning){
//                mapFragment.view?.visibility = View.INVISIBLE
//                startButton.visibility = View.VISIBLE
                saveDummyWalk()
                startButton.text = "ÏÇ∞Ï±Ö ÏãúÏûëÌïòÍ∏∞"
            }else{
                mapFragment.view?.visibility = View.VISIBLE
//                startButton.visibility = View.GONE
                startButton.text = "ÏÇ∞Ï±Ö Ï¢ÖÎ£åÌïòÍ∏∞"
                startTracking()
            }
            isRunning = !isRunning


        }
//        childFragmentManager.beginTransaction()
//            .replace(binding.courseFragmentCatainer.id, CourseListFragment())
//            .commit()
    }

    override fun onMapReady(map: GoogleMap) {
        googleMap = map
        googleMap?.uiSettings?.isMyLocationButtonEnabled = true


        val courseList = loadCoursesFromAsset(requireContext())
        try {
            getCurrentLocation(
                onSuccess = { location ->
                    Log.d("MapFragment", "ÌòÑÏû¨ ÏúÑÏπò: ${location.latitude}, ${location.longitude}")
                    val filteredList = LocationUtil.filterCoursesWithinRadius(
                        courseList,
                        35.573418,
                        129.189629,
                        radiusInKm = 20.0
                    )
                    Log.d("MapFragment", "ÌïÑÌÑ∞ÎßÅÎêú ÏΩîÏä§ Í∞úÏàò: ${filteredList.size}")
                    if (filteredList.isNotEmpty()) {
                        addCourseMarkers(filteredList)
                    } else {
                        Toast.makeText(requireContext(), "Ï∂îÏ≤ú ÏΩîÏä§Í∞Ä ÏóÜÏäµÎãàÎã§.", Toast.LENGTH_SHORT).show()
                        // ÌïÑÏöîÌïòÎã§Î©¥ Ï†ÑÏ≤¥ ÏΩîÏä§ ÌëúÏãú
                        // addCourseMarkers(courseList)  // ÎòêÎäî ÏïÑÎ¨¥ Í≤ÉÎèÑ ÏïàÌï®
                    }
                    showCurrentLocation()

                },
                onFailure = {
                    Toast.makeText(requireContext(), "ÌòÑÏû¨ ÏúÑÏπòÎ•º Í∞ÄÏ†∏Ïò¨ Ïàò ÏóÜÏäµÎãàÎã§.", Toast.LENGTH_SHORT)
                        .show()
                    Log.e("MapFragment", "ÌòÑÏû¨ ÏúÑÏπòÎ•º Í∞ÄÏ†∏Ïò¨ Ïàò ÏóÜÏäµÎãàÎã§.")
                    // fallback: Ï†ÑÏ≤¥ ÏΩîÏä§ ÌëúÏãú
                    addCourseMarkers(courseList)
                }
            )
        }catch (e: Exception){
            Log.e("MapFragment", "onMapReadyÏóêÏÑú ÏòàÏô∏ Î∞úÏÉù: ${e.message}", e)
        }
        // ÎßàÏª§ ÌÅ¥Î¶≠ Ïù¥Î≤§Ìä∏
        googleMap.setOnMarkerClickListener { marker ->
            val course = markerCourseMap[marker]
            if(course != null){
                Log.d("MapFragment", "ÎßàÏª§ ÌÅ¥Î¶≠: ${course.name}")
                selectMarker = marker
                //ÎßàÏª§ ÌÅ¥Î¶≠ Ïãú Ïπ¥Î©îÎùº ÏúÑÎ°ú Î≥¥Ï†ïÌïòÎäî ÏΩîÎìú
                val currentZoom = googleMap.cameraPosition.zoom

                val projection = googleMap.projection
                val markerPoint = projection.toScreenLocation(marker.position)

                // YÏ¢åÌëúÎ•º ÏúÑÎ°ú Ïù¥Îèô (Í∞íÏù¥ ÌÅ¥ÏàòÎ°ù ÏúÑÎ°ú Ïò¨ÎùºÍ∞ê)
                val offsetY = 200  // px Îã®ÏúÑ, ÌïÑÏöîÏóê Îî∞Îùº Ï°∞Ï†à
                markerPoint.y -= offsetY

                // Îã§Ïãú LatLngÎ°ú Î≥ÄÌôò
                val newLatLng = projection.fromScreenLocation(markerPoint)
                googleMap.animateCamera(CameraUpdateFactory.newLatLngZoom(newLatLng, currentZoom))
                showFloatingCard(marker, course)
            }else {
                Log.e("MapFragment", "ÎßàÏª§Ïóê Ìï¥ÎãπÌïòÎäî ÏΩîÏä§Í∞Ä ÏóÜÏäµÎãàÎã§.")
            }
            true
        }

        // ÏßÄÎèÑ ÌôîÎ©¥ Ïù¥Îèô Ïãú Ïù¥Î≤§Ìä∏Ìï∏Îì§Îü¨
        googleMap.setOnCameraMoveListener {
            selectMarker?.let{ marker ->
                updateCardPosition(marker)
            }
        }

        if (ContextCompat.checkSelfPermission(requireContext(), Manifest.permission.ACCESS_FINE_LOCATION)
            == PackageManager.PERMISSION_GRANTED
        ) {
            showCurrentLocation()  // üîÅ ÎßàÏª§ Ï∂îÍ∞Ä ÌõÑ ÌòÑÏû¨ ÏúÑÏπò ÌëúÏãú
        } else {
            ActivityCompat.requestPermissions(
                requireActivity(),
                arrayOf(Manifest.permission.ACCESS_FINE_LOCATION),
                LOCATION_PERMISSION_REQUEST_CODE
            )
        }
    }

    private fun updateCardPosition(marker: Marker){
        val projection = googleMap.projection
        val screenPosition = projection.toScreenLocation(marker.position)

        val cardView = binding.floatingCardContainer.getChildAt(0) ?: return

        cardView.post {
            cardView.x = screenPosition.x - cardView.width / 2f
            cardView.y = screenPosition.y - cardView.height - 30f
        }
    }

    private fun showCurrentLocation() {
        getCurrentLocation(
            onSuccess = { location ->
                val currentLatLng = LatLng(35.573418, 129.189629)
                googleMap?.apply {
//                                clear()
//                    addMarker(MarkerOptions().position(currentLatLng).title("ÌòÑÏû¨ ÏúÑÏπò"))
                    moveCamera(CameraUpdateFactory.newLatLngZoom(currentLatLng, 13f))
                    try {
                        isMyLocationEnabled = true
                    }catch (e: SecurityException){
                        Log.e("MapFragment", "ÏúÑÏπò Í∂åÌïú ÏóÜÏùå: ${e.message}")
                    }
                }
            },
            onFailure = {
                Toast.makeText(requireContext(), "ÏúÑÏπòÎ•º Í∞ÄÏ†∏Ïò¨ Ïàò ÏóÜÏäµÎãàÎã§", Toast.LENGTH_SHORT).show()
            }
        )

    }

    private fun addCourseMarkers(courseList: List<AssetCourseData>) {
        val builder = LatLngBounds.Builder()
        for (course in courseList) {
            val lat = course.latitude?.toDoubleOrNull()
            val lng = course.longitude?.toDoubleOrNull()

            if (lat != null && lng != null) {
                val position = LatLng(lat, lng)
                val markerOptions = MarkerOptions()
                    .position(position)
                    .title(course.name ?: "ÏΩîÏä§") // nameÏùÄ "Í∏∏Î™Ö"Ïóê Ìï¥ÎãπÌïòÎäî ÌïÑÎìú
//                Log.w("MapFragment", "Ï¢åÌëúÍ∞Ä ÎßàÏª§ ÏûëÏÑ±Ìï®: ${course.name}")

                val marker = googleMap.addMarker(markerOptions)

                if(marker != null){
                    markerCourseMap[marker] = course
                }

                builder.include(LatLng(lat, lng))
            }else{
                Log.w("MapFragment", "Ï¢åÌëúÍ∞Ä ÏûòÎ™ªÎêòÏñ¥ ÎßàÏª§ Í±¥ÎÑàÎúÄ: ${course.name}")
            }
        }
        val bounds = builder.build()
        googleMap.moveCamera(CameraUpdateFactory.newLatLngBounds(bounds, 100))
    }
    private fun loadCoursesFromAsset(context: Context): List<AssetCourseData> {
        val json = context.assets.open("walking_courses.json").bufferedReader().use { it.readText() }
        val wrapper = Gson().fromJson(json, CourseWrapper::class.java)
        return wrapper.records
    }

    private fun showFloatingCard(marker: Marker, course: AssetCourseData){
        Log.d("MapFragment", "FloatingCard ÌëúÏãú: ${course.name}, Ï¢åÌëú: ${course.latitude}, ${course.longitude}")

        val container = binding.floatingCardContainer
        container.removeAllViews()

        val cardView = layoutInflater.inflate(R.layout.item_course_card, binding.courseFragmentCatainer, false)

        val imageView = cardView.findViewById<ImageView>(R.id.image)
        val titleView = cardView.findViewById<TextView>(R.id.title)
        val lengthView = cardView.findViewById<TextView>(R.id.lengthInfo)
        val timeView = cardView.findViewById<TextView>(R.id.timeInfo)
        val gotoBtn = cardView.findViewById<Button>(R.id.btnGoto)

        val lat = course.latitude?.toDoubleOrNull()
        val lng = course.longitude?.toDoubleOrNull()

        imageView.setImageResource(R.drawable.ic_road)
        titleView.text = course.name ?: "Ïïå Ïàò ÏóÜÏùå"
        lengthView.text = "Ï¥ù Í∏∏Ïù¥: ${course.length ?: "?"} km"
        timeView.text = "ÏòàÏÉÅ ÏãúÍ∞Ñ: ${course.time ?: "?"} Î∂Ñ"

        //ÎÑ§ÎπÑÍ≤åÏù¥ÏÖò Ïó∞Îèô
        gotoBtn.setOnClickListener {
            if (lat != null && lng != null) {
                startGoogleNavigation(requireContext(),  lat, lng)
            }
            true
        }

        cardView.isClickable = true
        cardView.isFocusableInTouchMode = true
        cardView.bringToFront()

        container.addView(cardView)
        cardView.post {
            val projection = googleMap.projection
            val screenPosition = projection.toScreenLocation(marker.position)
            // ÌôîÎ©¥ Ï§ëÏã¨ Í∏∞Ï§Ä ÎßàÏª§ ÏúÑÏóê Ïπ¥Îìú ÏúÑÏπò Ï°∞Ï†ï
            cardView.x = screenPosition.x - cardView.width / 2f
            cardView.y = screenPosition.y - cardView.height - 30f // ÎßàÏª§ ÏúÑ ÏÇ¥Ïßù ÎùÑÏö∞Í∏∞
        }
        container.visibility = View.VISIBLE
    }

    override fun onRequestPermissionsResult(
        requestCode: Int,
        permissions: Array<out String?>,
        grantResults: IntArray
    ) {
        super.onRequestPermissionsResult(requestCode, permissions, grantResults)
        if(requestCode == LOCATION_PERMISSION_REQUEST_CODE){
            if((grantResults.isNotEmpty() && grantResults[0] == PackageManager.PERMISSION_GRANTED)){
                showCurrentLocation()
            }else{
                Toast.makeText(requireContext(), "ÏúÑÏπò Í∂åÌïúÏù¥ ÌïÑÏöîÌï©ÎãàÎã§.", Toast.LENGTH_SHORT)
            }
        }
    }

    private fun getCurrentLocation(onSuccess: (Location) -> Unit, onFailure: () -> Unit){
        if (ContextCompat.checkSelfPermission(
                requireContext(),
                Manifest.permission.ACCESS_FINE_LOCATION
            ) == PackageManager.PERMISSION_GRANTED
        ) {
            fusedLocationClient.lastLocation
                .addOnSuccessListener { location: Location? ->
                    if (location != null) {
                        onSuccess(location)
                    } else {
                        Log.e("MapFragment", "fusedLocationClient.lastLocation Î∞òÌôòÍ∞íÏù¥ null")
                        onFailure()
                    }
                }
        } else {
            Log.e("MapFragment", "ÏúÑÏπò Í∂åÌïúÏù¥ ÏóÜÏäµÎãàÎã§.")
            onFailure()
        }
    }

    private fun startGoogleNavigation(context: Context, lat: Double, lng: Double){
        val uri = Uri.parse("google.navigation:q=$lat,$lng&mode=w") // w: Í±∑Í∏∞, d: Ïö¥Ï†Ñ, r: ÎåÄÏ§ëÍµêÌÜµ
        val intent = Intent(Intent.ACTION_VIEW, uri)
        intent.setPackage("com.google.android.apps.maps")
        if (intent.resolveActivity(context.packageManager) != null) {
            context.startActivity(intent)
        } else {
            Toast.makeText(context, "Íµ¨Í∏Ä ÏßÄÎèÑ Ïï±Ïù¥ ÏÑ§ÏπòÎêòÏñ¥ ÏûàÏßÄ ÏïäÏäµÎãàÎã§.", Toast.LENGTH_SHORT).show()
        }
    }

    private fun startTracking() {
        // TODO: ÏúÑÏπò Í∂åÌïú ÏöîÏ≤≠ Î∞è ÏúÑÏπò ÏóÖÎç∞Ïù¥Ìä∏ Î°úÏßÅ Íµ¨ÌòÑ
        getCurrentLocation(
            onSuccess = {location ->
                val userLat = location.latitude
                val userLng = location.longitude
                walkStartMillis = System.currentTimeMillis()

                runningPath.clear()
                // Í∏∞Ï°¥ Ìè¥Î¶¨ÎùºÏù∏ Ï†úÍ±∞ ÌõÑ ÏÉàÎ°ú ÏÉùÏÑ±
                runningPolyline?.remove()
                val opts = PolylineOptions()
                    .color(ContextCompat.getColor(requireContext(), R.color.softSkyBlue))
                    .width(7f)
                runningPolyline = googleMap?.addPolyline(opts)

                // ÏúÑÏπò ÏöîÏ≤≠(Í∞ÑÍ≤©/Ï†ïÌôïÎèÑ Ï°∞Ï†à Í∞ÄÎä•)
                // ÏµúÏã† API Í∂åÏû•: LocationRequest.Builder
                locationRequest = if (android.os.Build.VERSION.SDK_INT >= android.os.Build.VERSION_CODES.S) {
                    com.google.android.gms.location.LocationRequest.Builder(
                        com.google.android.gms.location.Priority.PRIORITY_HIGH_ACCURACY, 2000L
                    ).setMinUpdateIntervalMillis(1000L).build()
                } else {
                    @Suppress("DEPRECATION")
                    com.google.android.gms.location.LocationRequest.create().apply {
                        interval = 2000L
                        fastestInterval = 1000L
                        priority = com.google.android.gms.location.LocationRequest.PRIORITY_HIGH_ACCURACY
                    }
                }

//                fusedLocationClient.requestLocationUpdates()
                Toast.makeText(context, "ÏÇ∞Ï±ÖÏùÑ ÏãúÏûëÌï©ÎãàÎã§!", Toast.LENGTH_SHORT).show()

            },
            onFailure = {
                Toast.makeText(requireContext(), "ÏúÑÏπò Ï†ïÎ≥¥Î•º ÏÇ¨Ïö©Ìï† Ïàò ÏóÜÏäµÎãàÎã§", Toast.LENGTH_SHORT).show()
            }
        )
    }

    // Ï¢ÖÎ£åÌïòÍ∏∞: ÏúÑÏπòÏóÖÎç∞Ïù¥Ìä∏ Ï§ëÏßÄ + (ÏÑ†ÌÉù) Í±∞Î¶¨/ÏãúÍ∞Ñ Í≥ÑÏÇ∞
    private fun onStopTracking() {
        fusedLocationClient.removeLocationUpdates(locationcallback)

        val distanceMeters  = computeTotalDistanceMeters(runningPath)
        val distanceM = distanceMeters.roundToInt()
        val endedAt = Timestamp.now()
        val startedAtTs = walkStartMillis?.let { Timestamp(Date(it)) } ?: Timestamp.now()
        val durationSec = walkStartMillis?.let { ((System.currentTimeMillis() - it) / 1000L).toInt() } ?: 0

        // ÏãúÏûë/Ï¢ÖÎ£å Ï¢åÌëú
        val start = runningPath.firstOrNull()
        val end = runningPath.lastOrNull()

        // Í≤ΩÎ°ú polyline Ïù∏ÏΩîÎî© (nullable Î∞©ÏßÄÏö©ÏúºÎ°ú Í∑∏ÎåÄÎ°ú List<LatLng> ÏÇ¨Ïö©)
        val routePolyline = if (runningPath.size >= 2) {
            PolyUtil.encode(runningPath)
        } else {
            null
        }

        val stepsCount = 0


        val walk = WalkData(
            startedAt = startedAtTs,
            endedAt = endedAt,
            durationSec = durationSec,
            distanceM = distanceM,
            steps = stepsCount,
            startLat = start?.latitude,
            startLng = start?.longitude,
            endLat = end?.latitude,
            endLng = end?.longitude,
            routePolyline = routePolyline,
            note = null // ÌïÑÏöî Ïãú UIÏóêÏÑú ÏûÖÎ†•Î∞õÏùÄ Î©îÎ™® Î¨∏ÏûêÏó¥
        )

        WalkRepository.addWalkEntry(walk,
            onSuccess = { id ->
                val kmText = String.format(Locale.getDefault(), "%.2f km", distanceMeters / 1000.0)
                Toast.makeText(requireContext(), "Ìä∏ÎûòÌÇπ Ï¢ÖÎ£å - Ï¥ù Í±∞Î¶¨: $kmText", Toast.LENGTH_LONG).show()
                Log.d("WalkDebug", "Ï†ÄÏû• ÏÑ±Í≥µ: $id")
                end?.let {
                    googleMap?.addMarker(
                        com.google.android.gms.maps.model.MarkerOptions()
                            .position(it)
                            .title("Ï¢ÖÎ£å ÏßÄÏ†ê")
                    )
                }
            },
            onError = { e ->
                Log.e("WalkDebug", "Ï†ÄÏû• Ïã§Ìå®", e)
            }
        )



        // ÎßàÏßÄÎßâ ÏßÄÏ†ê ÎßàÏª§
        if (runningPath.isNotEmpty()) {
            val last = runningPath.last()
            googleMap?.addMarker(MarkerOptions().position(last).title("Ï¢ÖÎ£å ÏßÄÏ†ê"))
        }
    }

    // Îëê Ï†ê ÏÇ¨Ïù¥ Í±∞Î¶¨ Ìï©ÏÇ∞
    private fun computeTotalDistanceMeters(points: List<LatLng>): Double {
        if (points.size < 2) return 0.0
        val results = FloatArray(1)
        var sum = 0.0
        for (i in 1 until points.size) {
            val a = points[i - 1]
            val b = points[i]
            Location.distanceBetween(a.latitude, a.longitude, b.latitude, b.longitude, results)
            sum += results[0]
        }
        return sum
    }

    fun saveDummyWalk() {

        // ÏòàÏãú Í≤ΩÎ°ú (Îã®ÏàúÌûà 3Í∞ú Ï¢åÌëú Ïó∞Í≤∞)
        val fakePath = listOf(
            LatLng(37.5830, 127.0005), // ÌòúÌôîÏó≠
            LatLng(37.5815, 127.0025), // ÎßàÎ°úÎãàÏóêÍ≥µÏõê
            LatLng(37.5790, 127.0040)  // Ï∞ΩÍ≤ΩÍ∂Å ÏûÖÍµ¨
        )

        // Í≤ΩÎ°ú polyline Ïù∏ÏΩîÎî©
        val encodedPolyline = PolyUtil.encode(fakePath)

        // ÏãúÏûë & Ï¢ÖÎ£å ÏãúÍ∞Ñ (1ÏãúÍ∞Ñ Ï∞®Ïù¥)
        val startTime = Timestamp(Date(System.currentTimeMillis() - 3600_000))
        val endTime = Timestamp.now()

        // WalkData ÌòïÏãù ÎßûÏ∂∞ÏÑú ÏÉùÏÑ±
        val dummyWalk = WalkData(
            id = null,
            startedAt = Timestamp(Date(System.currentTimeMillis() - 2700_000)), // 45Î∂Ñ Ï†Ñ
            endedAt = Timestamp(Date(System.currentTimeMillis() - 900_000)),    // 15Î∂Ñ Ï†Ñ
            durationSec = 1800,
            distanceM = 1200,
            steps = 1800,
            startLat = fakePath.first().latitude,
            startLng = fakePath.first().longitude,
            endLat = fakePath.last().latitude,
            endLng = fakePath.last().longitude,
            routePolyline = encodedPolyline,
            note = "ÎåÄÌïôÎ°ú Ï†ÄÎÖÅ ÏÇ∞Ï±Ö"
        )

        // FirestoreÏóê Ï†ÄÏû•
        WalkRepository.addWalkEntry(dummyWalk,
            onSuccess = { id ->
                Log.e("WalkDebug","ÏûÑÏùò Îç∞Ïù¥ÌÑ∞ Ï†ÄÏû• ÏÑ±Í≥µ: ${id}")
            },
            onError = { e ->
                Log.e("WalkDebug", "ÏûÑÏùò Îç∞Ïù¥ÌÑ∞ Ï†ÄÏû• Ïã§Ìå®", e)
            }
        )
    }

}